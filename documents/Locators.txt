https://playwright.dev/docs/locators

*** page.getByRole() to locate by explicit and implicit accessibility attributes.
    <button>Sign in</button>
        await page.getByRole('button', { name: 'Sign in' }).click();

    <h3>Sign up</h3>
    <label>
        <input type="checkbox" /> Subscribe
    </label>
    <br/>
    <button>Submit</button>
        await expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();
        await page.getByRole('checkbox', { name: 'Subscribe' }).check();
        await page.getByRole('button', { name: /submit/i }).click();

        const locator = page.getByRole('button', { name: 'Sign in' });
        await locator.hover();
        await locator.click();

        const locator = page.frameLocator('#my-frame').getByRole('button', { name: 'Sign in' });
        await locator.click();


*** page.getByText() to locate by text content.
    <span>Welcome, John</span>
        await expect(page.getByText('Welcome, John')).toBeVisible();
        await expect(page.getByText('Welcome, John', { exact: true })).toBeVisible();
        await expect(page.getByText(/welcome, [A-Za-z]+$/i)).toBeVisible();


*** page.getByLabel() to locate a form control by associated label's text.
    <label>Password <input type="password" /></label>
        await page.getByLabel('Password').fill('secret');

        await page.getByLabel('User Name').fill('John');
        await page.getByLabel('Password').fill('secret-password');


*** page.getByPlaceholder() to locate an input by placeholder.
    <input type="email" placeholder="name@example.com" />
        await page.getByPlaceholder('name@example.com').fill('playwright@microsoft.com');


*** page.getByAltText() to locate an element, usually image, by its text alternative.
    <img alt="playwright logo" src="/img/playwright-logo.svg" width="100" />
        await page.getByAltText('playwright logo').click();



*** page.getByTitle() to locate an element by its title attribute.
    <span title='Issues count'>25 issues</span>
        await expect(page.getByTitle('Issues count')).toHaveText('25 issues');



*** page.getByTestId() to locate an element based on its data-testid attribute (other attributes can be configured).
    <button data-testid="directions">Itinéraire</button>
        await page.getByTestId('directions').click();

    <button data-pw="directions">Itinéraire</button>
        await page.getByTestId('directions').click();

Locate by CSS or XPath
    await page.locator('css=button').click();
    await page.locator('xpath=//button').click();

    await page.locator('button').click();
    await page.locator('//button').click();

await page.locator('#tsf > div:nth-child(2) > div.A8SBwf > div.RNNXgb > div > div.a4bIc > input').click();

await page.locator('//*[@id="tsf"]/div[2]/div[1]/div[1]/div/div[2]/input').click();






BASIC LOCATORS

ID				                 driver.findElement(By.id(“button1”));
name				             driver.findElement(By.name(“full_name”));
tagName			                 driver.findElement(By.tagName(“input”));
className			             driver.findElement(By.tagName(“nav-link”));
linkText			             driver.findElement(By.linkText(“Example4: Element on page”));
partialLinkText			         driver.findElement(By.partialLinkText(“Example4”));

XPATH

Known Att&Value		             //tagName[@attribute=’value’]
Known Value Only		         //tagName[@*=’value’]
Known Visible Text		         //tagName[text()=’exact text’]
                                 //tagName[.=’exact text’]
                                 //*[text()=’exact text’]
                                 //*[.=’exact text’]
Known Visible Text (Partial)	 //tagName[contains(text(),’exact text’)]
Dynamic Element (Contains)	     //tagName[contains(@attribute,’value’)]
Dynamic Element (startswith)	 //tagName[startswith(@attribute,’value’)]
Dynamic Element (endswith)	     //tagName[endswith(@attribute,’value’)]
With Multiple Attributes	     //tagName[@attribute1=’value1’] [@attribute2=’value2’]
                                 //tagName[@attribute1=’value1’ and @attribute2=’value2’]
                                 //tagName[@attribute1=’value1’] or @attribute2=’value2’]
Relative to Known Element	     //<Known part>/parent::*
                                 //<Known part>/parent::tagName
                                 //<Known part>/following-sibling::*
                                 //<Known part>/following-sibling::tagName

CSS

ID				                 tagName#idValue
				                 #idValue
className			             tagName.classValue
				                 .classValue
				                 tagName.btn.btn-primary
Known Att&Value		             tagName[attribute=’value’]
				                 [attribute=’value’]
Dynamic Element (contains)	     tagName[ attribute*,’value’]
Dynamic Element (startsWith)	 tagName[ attribute^,’value’]
Dynamic Element (endsWith)	     tagName[ attribute$,’value’]
If Multiple Results		         <CSS>:nth-of-type(index)
Multiple Attributes		         tagName[attribute1=’value1’] [attribute2=’value2’]
Child Element			         tag > tag > tag
Parent Element			         tag tag tag
Sibling Element			         <CSS>~tagName



//    Above
//    If the email text field element is not easily identifiable for some reason, but the password text field element is, we can locate the text field element using the fact that it is an “input” element “above” the password element.
    By emailLocator = RelativeLocator.with(By.tagName("input")).above(By.id("password"));

//    Below
//    If the password text field element is not easily identifiable for some reason, but the email text field element is, we can locate the text field element using the fact that it is an “input” element “below” the email element.
    By passwordLocator = RelativeLocator.with(By.tagName("input")).below(By.id("email"));

//    Left of
//    If the cancel button is not easily identifiable for some reason, but the submit button element is, we can locate the cancel button element using the fact that it is a “button” element to the “left of” the submit element.
    By cancelLocator = RelativeLocator.with(By.tagName("button")).toLeftOf(By.id("submit"));

//    Right of
//    If the submit button is not easily identifiable for some reason, but the cancel button element is, we can locate the submit button element using the fact that it is a “button” element “to the right of” the cancel element.
    By submitLocator = RelativeLocator.with(By.tagName("button")).toRightOf(By.id("cancel"));

//    Near
//    If the relative positioning is not obvious, or it varies based on window size, you can use the near method to identify an element that is at most 50px away from the provided locator. One great use case for this is to work with a form element that doesn’t have an easily constructed locator, but its associated input label element does.
    By emailLocator2 = RelativeLocator.with(By.tagName("input")).near(By.id("lbl-email"));

//    Chaining relative locators
//    You can also chain locators if needed. Sometimes the element is most easily identified as being both above/below one element and right/left of another.
    By submitLocator2 = RelativeLocator.with(By.tagName("button")).below(By.id("email")).toRightOf(By.id("cancel"));